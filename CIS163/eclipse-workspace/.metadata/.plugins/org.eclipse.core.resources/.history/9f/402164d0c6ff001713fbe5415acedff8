package project1;

import static org.junit.Assert.*;

import org.junit.Test;

public class CountDownTimerTest {
	

	/****** 
	 * Here are some example JUnit test methods.  Some of the test 
	 * methods do several assertions, while others have only one assert.  
	 * 		What so you think is a better approach?
	 *  	Are there situation where only one assertion is required?
	 *     
	 * Your assignment is to write many test cases so that 
	 * the CountDownTimer class is throughly tested!!!
	 * 	   How may  test cases do I need?
	 * 
	 *     Good questions to ask in class.
	 * 
	 * ******/
	
	@Test
	public void testConstructor() {
		CountDownTimer s = new CountDownTimer (5,10,30);
		assertEquals(s.toString(),"5:10:30");
		
		s = new CountDownTimer("20:10:8");
		assertEquals(s.toString(),"20:10:08");
		
		s = new CountDownTimer("20:8");
		assertEquals(s.toString(),"0:20:08");
		
		s = new CountDownTimer("8");
		assertEquals(s.toString(),"0:00:08");
		
		s = new CountDownTimer(8);
		assertEquals(s.toString(),"0:00:08");
		
		s = new CountDownTimer("1:1:1");
		assertEquals(s.toString(), "1:01:01");
		
		s = new CountDownTimer("11:11:11");
		assertEquals(s.toString(), "11:11:11");
		
		s = new CountDownTimer(12,12,12);
		assertEquals(s.toString(), "12:12:12");
		
		s = new CountDownTimer("12:12:12");
		assertEquals(s.toString(), "12:12:12");
		
		s = new CountDownTimer(13, 23, 59);
		assertEquals(s.toString(), "13:23:59");
		
		s = new CountDownTimer("23:59:59");
		assertEquals(s.toString(), "23:59:59");
		
		s = new CountDownTimer(23, 1, 1);
		assertEquals(s.toString(), "23:01:01");
		
		s = new CountDownTimer("12:2");
		assertEquals(s.toString(), "0:12:02");
		
		s = new CountDownTimer(23, 2);
		assertEquals(s.toString(), "0:23:02");
		
		s = new CountDownTimer("");
		assertEquals(s.toString(), "0:00:00");
		
		s = new CountDownTimer(0, 0, 0);
		assertEquals(s.toString(), "0:00:00");
		
		CountDownTimer s2 = new CountDownTimer("1:1:1");
		CountDownTimer s3 = new CountDownTimer(s2);
		assertEquals(s2.toString(), s3.toString());
		
		CountDownTimer s4 = new CountDownTimer(12, 12, 12);
		s4 = new CountDownTimer(s2);
		assertEquals(s2.toString(), s4.toString());
		
	}
	
	// Note: you are only allowed to have one exception occur
	// In other words, since the constructor throws and exception
	// no additional lines of code after the constructor should be added
	@Test(expected=IllegalArgumentException.class)
	public void testConstructorWithErrors() {
//		new CountDownTimer (5,100,300);	
//		new CountDownTimer (3000, 12312);
//		new CountDownTimer (-3);
//		
//		CountDownTimer s1 = new CountDownTimer(3, 3, 3);
//		CountDownTimer s2 = new CountDownTimer(s1);
//		new CountDownTimer ("9999:111");
//		s2.equals(s1);
//		
//		s1.add(-3);
//		s1.sub(-99);
		
	}

	@Test
	public void testSubMethod () {
		CountDownTimer s1 = new CountDownTimer (5,01,30);
		s1.sub(2000);
		assertEquals (s1.toString(),"4:28:10");
		
		s1 = new CountDownTimer (5,59,30);
		CountDownTimer s2 = new CountDownTimer (1,2,35);
		s1.sub(s2);
		assertEquals (s1.toString(),"4:56:55");
	
		for (int i = 0; i < 15000; i++) {
			s1.dec();
			// System.out.println (s1);
		}

		assertEquals (s1.toString(),"0:46:55");	
	}
	
	@Test
	public void testAddMethod () {
		CountDownTimer s1 = new CountDownTimer (5,01,30);
		s1.add(3600);
		assertEquals (s1.toString(),"6:01:30");
		
		for(int i = 0; i < 3601; i++) {
			s1.inc();
		}
		assertEquals(s1.toString(), "7:01:31");
		
		CountDownTimer s2 = new CountDownTimer("1:1:1");
		s2.add(s1);
		assertEquals(s2.toString(), "8:02:32");
		
		CountDownTimer s3 = new CountDownTimer(3, 20, 10);
		s3.add(7200);
		assertEquals(s3.toString(), "5:20:10");
	}
	
	@Test 
	public void testEqual () {
		CountDownTimer s1 = new CountDownTimer (5,59,00);
		CountDownTimer s2 = new CountDownTimer (6,01,00);
		CountDownTimer s3 = new CountDownTimer ("5:59:00");

		assertFalse(s1.equals(s2));
		assertTrue (s1.equals(s3));
		
		assertTrue (CountDownTimer.equals(s3, s1));
		assertFalse (CountDownTimer.equals(s1, s2));
	}
	
	@Test 
	public void testCompareTo () {
		CountDownTimer s1 = new CountDownTimer (5,59,00);
		CountDownTimer s2 = new CountDownTimer (6,01,00);
		CountDownTimer s3 = new CountDownTimer (5,50,20);
		CountDownTimer s4 = new CountDownTimer ("5:59:00");
		
		assertTrue (s2.compareTo(s1) > 0);
		assertTrue (s3.compareTo(s1) < 0);
		assertTrue (s1.compareTo(s4) == 0);	
		
		assertTrue (CountDownTimer.compareTo(s2, s1) > 0);
		assertTrue (CountDownTimer.compareTo(s3, s1) < 0);
		assertTrue (CountDownTimer.compareTo(s1, s4) == 0);
		assertTrue (CountDownTimer.compareTo(s4, s3) > 0);
	}
	
	@Test 
	public void testLoadSave () {
		CountDownTimer s1 = new CountDownTimer (5,59,30);
		CountDownTimer s2 = new CountDownTimer ("5:59:30");

		s1.save("saveIt");
		s1 = new CountDownTimer ();  // resets to zero
		
		s1.load("saveIt");
		assertTrue (s1.equals(s2));
	}
}